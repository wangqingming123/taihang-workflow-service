/**
 * This is auto-generated by code generator tools, YOU *MUST* Implement all the methods!!!
 */
package com.allintechinc.taihang.workflow.service.impl;

import com.allintechinc.taihang.form.SearchForm;
import com.allintechinc.taihang.request.HttpRequestHolder;
import com.allintechinc.taihang.utils.DTOUtil;
import com.allintechinc.taihang.workflow.common.ResponseResult;
import com.allintechinc.taihang.workflow.dto.ProcessDefinitionDto;
import com.allintechinc.taihang.workflow.dto.ProcessTypeDto;
import com.allintechinc.taihang.workflow.entity.ProcessDefinition;
import com.allintechinc.taihang.workflow.exception.ProcessRecordBusinessException;
import com.allintechinc.taihang.workflow.form.ProcessDefinitionForm;
import com.allintechinc.taihang.workflow.handler.ProcessDefinitionHandler;
import com.allintechinc.taihang.workflow.repository.ProcessRecordRepository;
import com.allintechinc.taihang.workflow.service.ProcessRecordService;
import com.allintechinc.taihang.workflow.util.IConstants;
import com.google.common.collect.Lists;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;


/**
 * @author sundp
 */
@Service
public class ProcessRecordServiceImpl implements ProcessRecordService {

    private final ProcessRecordRepository processRecordRepository;
    private final ProcessDefinitionHandler processHandler;

    @Autowired
    public ProcessRecordServiceImpl(ProcessRecordRepository processRecordRepository, ProcessDefinitionHandler processHandler) {
        this.processRecordRepository = processRecordRepository;
        this.processHandler = processHandler;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Long create(ProcessDefinitionForm processDefinitionForm) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        Optional<ProcessDefinition> recordOptional = processRecordRepository.findByTenantIdAndProcessTypeAndReviewerIdsAndReviewerNames(tenantId, processDefinitionForm.getProcessType(), processDefinitionForm.getReviewerIds(), processDefinitionForm.getReviewerNames());
        if (recordOptional.isPresent()) {
            //如果存在更新时间
            ProcessDefinition processDefinition = recordOptional.get();
            processDefinition.setCreatedDate(LocalDateTime.now()).setLastModifiedDate(LocalDateTime.now()).setLastModifiedBy(HttpRequestHolder.getCurrentUserId());
            processRecordRepository.save(processDefinition);
            return processDefinition.getId();
        }
        ProcessDefinition processRecord = new ProcessDefinition();
        BeanUtils.copyProperties(processDefinitionForm, processRecord);

        String reviewerIds = processRecord.getReviewerIds();
        String reviewerNames = processRecord.getReviewerNames();

        //当流程审批人为空时，创建一个新的未发布的流程
        if (StringUtils.isEmpty(reviewerIds) || StringUtils.isEmpty(reviewerNames)) {

            List<ProcessDefinition> processDefinitionList = processRecordRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId);
            Map<String, List<ProcessDefinition>> processTypeMap = processDefinitionList.stream().collect(Collectors.groupingBy(ProcessDefinition::getProcessType));
            ArrayList<String> processNameList = new ArrayList<>();
            ArrayList<String> processTypeList = new ArrayList<>();
            processTypeMap.forEach((code, recordList) -> {
                processTypeList.add(recordList.get(0).getProcessType());
                processNameList.add(recordList.get(0).getName());
            });

            //创建新流程时,流程类型不能重复
            if (processTypeList.contains(processDefinitionForm.getProcessType())) {
                throw ProcessRecordBusinessException.PROCESS_DEFINITION_EXISTS;
            }

            //流程名称不能重复
            if (processNameList.contains(processDefinitionForm.getName())) {
                throw ProcessRecordBusinessException.PROCESS_NAME_EXISTS;
            }

            processRecord.setTenantId(tenantId);
            return processRecordRepository.save(processRecord).getId();
        }
        /*
         *  生成流程xml
         */
        ResponseResult<Map<String, String>> responseResult = processHandler.generatorProcessContents(processDefinitionForm);
        if (responseResult.getSuccess() && Objects.nonNull(responseResult.getBody())) {
            String contents = responseResult.getBody().get(IConstants.PROCESS_CONTENTS);
            String processKey = responseResult.getBody().get(IConstants.PROCESS_KEY);
            processRecord.setTenantId(tenantId).setContents(contents).setProcessKey(processKey).setCreatedBy(HttpRequestHolder.getCurrentUserId()).setLastModifiedBy(HttpRequestHolder.getCurrentUserId());
            /*
             *   保存流程定义
             */
            Long id = processRecordRepository.save(processRecord).getId();

            /*
             *   发布流程
             */
            ResponseResult<Object> responseData1 = processHandler.publish(String.valueOf(tenantId), processDefinitionForm.getName(), contents);
            return responseData1.getErrorCode().equals(ResponseResult.SUCCESS) ? id : 1L;
        }
        return 0L;
    }

    @Override
    public ProcessDefinitionDto detail(Long id) {
        Optional<ProcessDefinition> optional = processRecordRepository.findById(id);
        if (!optional.isPresent()) {
            throw ProcessRecordBusinessException.PROCESS_DEFINITION_NOT_EXISTS;
        }
        return DTOUtil.convert(optional.get(), ProcessDefinitionDto.class);
    }

    @Override
    public Page<ProcessDefinitionDto> search(SearchForm searchForm) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();

        List<ProcessDefinition> processDefinitionList = processRecordRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId);
        if (CollectionUtils.isEmpty(processDefinitionList)) {
            return new PageImpl<>(Lists.newArrayList(), searchForm.pageable(), 0);
        }
        //过滤数据
        Map<String, Object> searchMap = searchForm.getFilter();
        if (!CollectionUtils.isEmpty(searchMap)) {
            //流程类型
            String processType = (String) searchMap.get(IConstants.PROCESS_PROCESS_TYPE);
            //流程名称
            String processName = (String) searchMap.get(IConstants.PROCESS_PROCESS_NAME);

            if (StringUtils.isNotEmpty(processType)) {
                processDefinitionList = processDefinitionList.stream().filter(processDefinition -> processType.equals(processDefinition.getProcessType())).collect(Collectors.toList());
            }
            if (StringUtils.isNotEmpty(processName)) {
                processDefinitionList = processDefinitionList.stream().filter(processDefinition -> processDefinition.getName().contains(processName)).collect(Collectors.toList());
            }
            if (CollectionUtils.isEmpty(processDefinitionList)) {
                return new PageImpl<>(Lists.newArrayList(), searchForm.pageable(), 0);
            }
        }

        Map<String, List<ProcessDefinition>> map = processDefinitionList.stream().collect(Collectors.groupingBy(ProcessDefinition::getProcessType));
        List<ProcessDefinitionDto> processRecordDtoList = Lists.newArrayList();
        map.forEach((code, recordList) -> {
            ProcessDefinitionDto processRecordDto = new ProcessDefinitionDto();
            BeanUtils.copyProperties(recordList.get(0), processRecordDto);
            processRecordDtoList.add(processRecordDto);
        });
        //按照流程名称排序 TAIH-8995
        processRecordDtoList.sort(Comparator.comparing(ProcessDefinitionDto::getName).reversed());
        List<List<ProcessDefinitionDto>> parts = Lists.partition(processRecordDtoList, searchForm.getPageSize());
        List<ProcessDefinitionDto> listResult = parts.size() == 1 ? parts.get(0) : parts.get(searchForm.getPageNo() - 1);
        return new PageImpl<>(listResult, searchForm.pageable(), processRecordDtoList.size());
    }

    @Override
    public ProcessTypeDto processTypeList() {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        List<ProcessDefinition> list = processRecordRepository.findAllByTenantId(tenantId);
        ProcessTypeDto processTypeDto = new ProcessTypeDto();
        List<String> processTypeLists = list.stream().map(ProcessDefinition::getName).distinct().collect(Collectors.toList());
        processTypeDto.setProcessTypes(processTypeLists);
        return processTypeDto;
    }

    @Override
    public Boolean exist(String processType) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        Optional<ProcessDefinition> optional = processRecordRepository.findFirstByTenantIdAndProcessTypeOrderByCreatedDateDesc(tenantId, processType);
        return optional.isPresent() && StringUtils.isNotEmpty(optional.get().getProcessKey());
    }
}