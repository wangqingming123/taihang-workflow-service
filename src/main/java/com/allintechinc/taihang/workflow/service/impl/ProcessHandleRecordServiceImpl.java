package com.allintechinc.taihang.workflow.service.impl; /**
 * This is auto-generated by code generator tools, YOU *MUST* Implement all the methods!!!
 */

import com.allintechinc.taihang.form.SearchForm;
import com.allintechinc.taihang.request.HttpRequestHolder;
import com.allintechinc.taihang.workflow.common.ResponseResult;
import com.allintechinc.taihang.workflow.dto.*;
import com.allintechinc.taihang.workflow.entity.ProcessDefinition;
import com.allintechinc.taihang.workflow.entity.ProcessTaskHistory;
import com.allintechinc.taihang.workflow.enums.ProcessStatusEnum;
import com.allintechinc.taihang.workflow.exception.ProcessHandleRecordException;
import com.allintechinc.taihang.workflow.exception.ProcessRecordBusinessException;
import com.allintechinc.taihang.workflow.form.ApplyUserForm;
import com.allintechinc.taihang.workflow.form.ProcessParamForm;
import com.allintechinc.taihang.workflow.form.ReviewForm;
import com.allintechinc.taihang.workflow.form.UserForm;
import com.allintechinc.taihang.workflow.handler.ProcessInstanceHandler;
import com.allintechinc.taihang.workflow.handler.TaskHandler;
import com.allintechinc.taihang.workflow.repository.ProcessHandleRecordRepository;
import com.allintechinc.taihang.workflow.repository.ProcessRecordRepository;
import com.allintechinc.taihang.workflow.service.ProcessHandleRecordService;
import com.allintechinc.taihang.workflow.util.IConstants;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.commons.lang3.StringUtils;
import org.flowable.engine.HistoryService;
import org.flowable.engine.TaskService;
import org.flowable.engine.history.HistoricProcessInstance;
import org.flowable.engine.history.HistoricProcessInstanceQuery;
import org.flowable.variable.api.history.HistoricVariableInstance;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @author code generator tool
 */
@Service
public class ProcessHandleRecordServiceImpl implements ProcessHandleRecordService {

    private final ProcessInstanceHandler processInstanceHandler;
    private final ProcessRecordRepository processRecordRepository;
    private final ProcessHandleRecordRepository processHandleRecordRepository;
    private final TaskHandler taskHandler;
    private final HistoryService historyService;
    private final TaskService taskService;

    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Autowired
    public ProcessHandleRecordServiceImpl(ProcessInstanceHandler processInstanceHandler, TaskHandler taskHandler, ProcessRecordRepository processRecordRepository, ProcessHandleRecordRepository processHandleRecordRepository, HistoryService historyService, TaskService taskService) {
        this.processInstanceHandler = processInstanceHandler;
        this.taskHandler = taskHandler;
        this.processRecordRepository = processRecordRepository;
        this.processHandleRecordRepository = processHandleRecordRepository;
        this.historyService = historyService;
        this.taskService = taskService;
    }

    @Override
    public Void approved(ReviewForm form) {
        form.setStatus(ProcessStatusEnum.APPROVED.toString());
        taskHandler.handleTask(form);
        return null;
    }

    @Override
    public Void reject(ReviewForm form) {
        form.setStatus(ProcessStatusEnum.REJECT.toString());
        taskHandler.handleTask(form);
        return null;
    }

    @Override
    public Page<ProcessTaskHistoryDto> search(SearchForm searchForm) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        ResponseResult<Map<String, Object>> responseResult = taskHandler.getTasksByTenantIdAndAssigneeAndStatus(tenantId, searchForm);
        if (responseResult.getSuccess() && !CollectionUtils.isEmpty(responseResult.getBody())) {
            Map<String, Object> stringObjectMap = responseResult.getBody();
            return search(stringObjectMap, searchForm);
        }
        return new PageImpl<>(Lists.newArrayList(), searchForm.pageable(), 0);
    }

    private LocalDateTime convertDate(Date date) {
        Instant instant = date.toInstant();
        ZoneId zone = ZoneId.systemDefault();
        return LocalDateTime.ofInstant(instant, zone);
    }

    private Page<ProcessTaskHistoryDto> search(Map<String, Object> stringObjectMap, SearchForm searchForm) {
        List<TaskDTO> listTasks = (List<TaskDTO>) stringObjectMap.get(IConstants.TASK_LIST);
        List<ProcessTaskHistoryDto> processHandlerRecordList = Lists.newArrayList();
        String status = (String) searchForm.getFilter().get(IConstants.PROCESS_STATUS);
        for (TaskDTO taskDTO : listTasks) {
            //已办、待办通用
            ProcessTaskHistoryDto processTaskHistoryDto = new ProcessTaskHistoryDto();
            processTaskHistoryDto.setProcessInstanceId(taskDTO.getProcessInstanceId())
                    .setApplyUserId(taskDTO.getApplyUserId())
                    .setApplyUser(taskDTO.getApplyUser())
                    .setOperatorName(taskDTO.getAssignee())
                    .setProcessType(taskDTO.getProcessType())
                    .setTaskId(taskDTO.getId())
                    .setTaskName(taskDTO.getName())
                    .setBusinessId(taskDTO.getBusinessId())
                    .setBusinessCode(taskDTO.getBusinessCode())
                    .setBeginTime(convertDate(taskDTO.getCreateTime()).format(DATE_TIME_FORMATTER))
                    .setStatus(taskDTO.getStatus()).setBusinessData(taskDTO.getBusinessData())
                    .setProcessInstanceName(taskDTO.getProcessDefinitionName());
            if (!ProcessStatusEnum.IN_PROCESS.toString().equals(status)) {
                //已办
                processTaskHistoryDto.setTaskId(taskDTO.getExecutionId())
                        .setOperatorId(taskDTO.getOperatorId())
                        .setEndTime(convertDate(taskDTO.getEndTime()).format(DATE_TIME_FORMATTER))
                        .setComment(taskDTO.getComment());
            }
            processHandlerRecordList.add(processTaskHistoryDto);
        }
        return new PageImpl<>(processHandlerRecordList, searchForm.pageable(), (Integer) stringObjectMap.get(IConstants.TOTAL));
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public ProcessTaskDto startProcessInstance(ProcessParamForm form) {
        Long tenantId = form.getTenantId() == null ? HttpRequestHolder.getCurrentTenantId() : form.getTenantId();
        Optional<ProcessDefinition> optional = processRecordRepository.findFirstByTenantIdAndProcessTypeOrderByCreatedDateDesc(tenantId, form.getProcessType());
        if (optional.isPresent() && StringUtils.isNotEmpty(optional.get().getProcessKey())) {
            ProcessDefinition processDefinition = optional.get();
            Map<String, Object> variables = Maps.newHashMapWithExpectedSize(16);
            //流程发起人Id
            variables.put(IConstants.PROCESS_APPLY_USER_ID, form.getApplyUserId());
            //流程发起者
            variables.put(IConstants.PROCESS_APPLY_USER, form.getApplyUser());
            //流程类型
            variables.put(IConstants.PROCESS_PROCESS_TYPE, form.getProcessType());
            //审批单业务主键
            variables.put(IConstants.PROCESS_BUSINESS_ID, form.getBusinessId());
            //流程 process key
            variables.put(IConstants.PROCESS_KEY, processDefinition.getProcessKey());
            //业务数据
            variables.put(IConstants.PROCESS_BUSINESS_DATA, form.getBusinessData());
            //流程名称
            variables.put(IConstants.PROCESS_PROCESS_NAME, processDefinition.getName());
            //启动流程并且返回第一个任务
            ResponseResult<ProcessTaskDto> responseResult = processInstanceHandler.startProcessByProcessKeyAndReturnFirstTask(tenantId, form.getBusinessCode(), processDefinition.getProcessKey(), variables);
            if (responseResult.getSuccess() && Objects.nonNull(responseResult.getBody())) {
                return responseResult.getBody();
            }
        }
        return null;
    }

    @Override
    public List<ProcessTaskHistoryDto> detail(String processId) {
        HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery().processInstanceId(processId).singleResult();
        if (Objects.isNull(historicProcessInstance)) {
            throw ProcessRecordBusinessException.PROCESS_DEFINITION_NOT_EXISTS;
        }
        String processKey = historicProcessInstance.getProcessDefinitionKey();
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        //获取流程定义
        Optional<ProcessDefinition> optional = processRecordRepository.findFirstByTenantIdAndProcessKeyOrderByCreatedDateDesc(tenantId, processKey);
        if (!optional.isPresent()) {
            throw ProcessRecordBusinessException.PROCESS_DEFINITION_NOT_EXISTS;
        }
        ProcessDefinition processDefinition = optional.get();
        String reviewerIds = processDefinition.getReviewerIds();
        String reviewerNames = processDefinition.getReviewerNames();
        List<ProcessTaskHistory> processTaskHistoryList = processHandleRecordRepository.findAllByTenantIdAndProcessInstanceIdOrderByBeginTime(tenantId, processId);
        String[] assigneeIds = StringUtils.split(reviewerIds, ',');
        String[] assigneeNames = StringUtils.split(reviewerNames, ',');
        //按照操作人Id分组
        Map<Long, List<ProcessTaskHistory>> listMap = processTaskHistoryList.stream().collect(Collectors.groupingBy(ProcessTaskHistory::getOperatorId));
        List<ProcessTaskHistoryDto> processTaskHistoryDtoList = Lists.newArrayList();
        for (int i = 0; i < assigneeIds.length; i++) {
            String assigneeId = assigneeIds[i];
            List<ProcessTaskHistory> handleRecordList = listMap.get(Long.valueOf(assigneeId));
            if (!CollectionUtils.isEmpty(handleRecordList)) {
                //通过或者拒绝
                processTaskHistoryDtoList.add(generateProcessHandlerRecordDto(handleRecordList.get(handleRecordList.size() - 1)));
            } else {
                //未开始
                ProcessTaskHistoryDto processTaskHistoryDto = new ProcessTaskHistoryDto();
                processTaskHistoryDto.setTaskName(assigneeNames[i])
                        .setStatus(ProcessStatusEnum.NOT_STARTED.toString())
                        .setOperatorId(Long.valueOf(assigneeId))
                        .setOperatorName(assigneeNames[i]);
                processTaskHistoryDtoList.add(processTaskHistoryDto);
            }
        }
        //增加结束状态
        List<ProcessTaskHistory> handleRecordList = listMap.get(0L);
        if (!CollectionUtils.isEmpty(handleRecordList)) {
            processTaskHistoryDtoList.add(generateProcessHandlerRecordDto(handleRecordList.get(0)));
        }

        return processTaskHistoryDtoList;
    }

    @Override
    public List<ApplyUserDto> getAllApplyUsers(ApplyUserForm form) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        List<ApplyUserDto> applyUserDtoList = Lists.newArrayList();
        List<ProcessTaskHistory> processTaskHistoryList = processHandleRecordRepository.findAllByTenantIdAndOperatorId(tenantId, form.getReviewerId());
        if (!CollectionUtils.isEmpty(processTaskHistoryList)) {
            processTaskHistoryList.forEach(processTaskHistory -> {
                ApplyUserDto applyUserDto = new ApplyUserDto();
                applyUserDto.setApplyUserId(processTaskHistory.getApplyUserId());
                applyUserDto.setApplyUserName(processTaskHistory.getApplyUser());
                if (!applyUserDtoList.contains(applyUserDto)) {
                    applyUserDtoList.add(applyUserDto);
                }
            });
        }
        return applyUserDtoList;
    }

    private ProcessTaskHistoryDto generateProcessHandlerRecordDto(ProcessTaskHistory processTaskHistory) {
        ProcessTaskHistoryDto processTaskHistoryDto = new ProcessTaskHistoryDto();
        BeanUtils.copyProperties(processTaskHistory, processTaskHistoryDto);
        processTaskHistoryDto.setBeginTime(processTaskHistory.getBeginTime().format(DATE_TIME_FORMATTER))
                .setEndTime(processTaskHistory.getEndTime() != null ? processTaskHistory.getEndTime().format(DATE_TIME_FORMATTER) : "");
        return processTaskHistoryDto;
    }

    @Override
    public ProcessTaskHistoryDto findByTaskId(String taskId) {
        Optional<ProcessTaskHistory> optional = processHandleRecordRepository.findFirstByTaskIdOrderByBeginTimeDesc(taskId);
        if (optional.isPresent()) {
            ProcessTaskHistory processTaskHistory = optional.get();
            ProcessTaskHistoryDto processTaskHistoryDto = new ProcessTaskHistoryDto();
            BeanUtils.copyProperties(processTaskHistory, processTaskHistoryDto);
            processTaskHistoryDto.setBeginTime(processTaskHistory.getBeginTime().format(DATE_TIME_FORMATTER))
                    .setEndTime(processTaskHistory.getEndTime() != null ? processTaskHistory.getEndTime().format(DATE_TIME_FORMATTER) : "");
            List<HistoricVariableInstance> entityList = historyService.createHistoricVariableInstanceQuery()
                    .processInstanceId(processTaskHistory.getProcessInstanceId()).orderByVariableName().desc().list();
            processTaskHistoryDto.setBusinessData(getProcessVariableValueByVariableName(entityList, IConstants.PROCESS_BUSINESS_DATA));
            return processTaskHistoryDto;
        }
        throw ProcessHandleRecordException.PROCESS_TASK_NOT_EXISTS;
    }

    @Override
    public Page<ProcessTaskHistoryDto> getOwnerApprove(SearchForm searchForm) {
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        Long currentUserId = HttpRequestHolder.getCurrentUserId();
        ResponseResult<Map<String, Object>> responseResult = taskHandler.getOwnerApprove(tenantId, searchForm);
        if (responseResult.getSuccess() && !CollectionUtils.isEmpty(responseResult.getBody())) {
            Map<String, Object> stringObjectMap = responseResult.getBody();
            List<ProcessInstanceDTO> listProcessDTO = (List<ProcessInstanceDTO>) stringObjectMap.get(IConstants.PROCESS_LIST);
            List<ProcessTaskHistoryDto> processHandlerRecordList = Lists.newArrayList();
            for (ProcessInstanceDTO processInstanceDTO : listProcessDTO) {
                ProcessTaskHistoryDto processTaskHistoryDto = new ProcessTaskHistoryDto();
                processTaskHistoryDto.setProcessInstanceId(processInstanceDTO.getProcessInstanceId())
                        .setApplyUserId(currentUserId)
                        .setApplyUser(processInstanceDTO.getApplyUser())
                        .setBusinessId(processInstanceDTO.getBusinessId())
                        .setProcessType(processInstanceDTO.getProcessDefinitionName())
                        .setBusinessCode(processInstanceDTO.getBusinessKey())
                        .setBeginTime(convertDate(processInstanceDTO.getStartTime()).format(DATE_TIME_FORMATTER))
                        .setEndTime(processInstanceDTO.getEndTime() != null ? convertDate(processInstanceDTO.getEndTime()).format(DATE_TIME_FORMATTER) : "")
                        .setStatus(processInstanceDTO.getStatus()).setBusinessData(processInstanceDTO.getBusinessData())
                        .setProcessInstanceName(processInstanceDTO.getName());
                processHandlerRecordList.add(processTaskHistoryDto);
            }
            return new PageImpl<>(processHandlerRecordList, searchForm.pageable(), (Integer) stringObjectMap.get(IConstants.TOTAL));
        }
        return new PageImpl<>(Lists.newArrayList(), searchForm.pageable(), 0);
    }


    @Override
    public ProcessTaskHistoryDto getProcess(String processInstanceId) {
        Long currentTenantId = HttpRequestHolder.getCurrentTenantId();
        HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery().processInstanceTenantId(String.valueOf(currentTenantId)).processInstanceId(processInstanceId).singleResult();
        if (Objects.isNull(historicProcessInstance)) {
            throw ProcessRecordBusinessException.PROCESS_INSTANCE_NOT_EXISTS;
        }

        List<HistoricVariableInstance> entityList = historyService.createHistoricVariableInstanceQuery()
                .processInstanceId(processInstanceId).orderByVariableName().desc().list();

        ProcessTaskHistoryDto processHandlerRecordDto = new ProcessTaskHistoryDto();
        processHandlerRecordDto.setProcessInstanceId(processInstanceId)
                .setApplyUser(getProcessVariableValueByVariableName(entityList, IConstants.PROCESS_APPLY_USER))
                .setProcessType(getProcessVariableValueByVariableName(entityList, IConstants.PROCESS_PROCESS_TYPE))
                .setBusinessCode(historicProcessInstance.getBusinessKey())
                .setBeginTime(convertDate(historicProcessInstance.getStartTime()).format(DATE_TIME_FORMATTER))
                .setEndTime(historicProcessInstance.getEndTime() != null ? convertDate(historicProcessInstance.getEndTime()).format(DATE_TIME_FORMATTER) : "")
                .setStatus(Objects.isNull(historicProcessInstance.getEndTime()) ? ProcessStatusEnum.IN_PROCESS.toString() : ProcessStatusEnum.END.toString())
                .setBusinessData(getProcessVariableValueByVariableName(entityList, IConstants.PROCESS_BUSINESS_DATA))
                .setProcessInstanceName(getProcessVariableValueByVariableName(entityList, IConstants.PROCESS_PROCESS_NAME));

        return processHandlerRecordDto;
    }

    @Override
    public Boolean findUserFromWorkflow(UserForm form) {
        Long userId = form.getUserId();
        String userName = form.getUserName();
        Long tenantId = HttpRequestHolder.getCurrentTenantId();
        //流程定义中查询
        List<ProcessDefinition> processDefinitionList = processRecordRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId);
        if (!CollectionUtils.isEmpty(processDefinitionList)) {
            Map<String, List<ProcessDefinition>> map = processDefinitionList.stream().collect(Collectors.groupingBy(ProcessDefinition::getProcessType));
            List<ProcessDefinitionDto> processRecordDtoList = Lists.newArrayList();
            map.forEach((code, recordList) -> {
                ProcessDefinitionDto processRecordDto = new ProcessDefinitionDto();
                BeanUtils.copyProperties(recordList.get(0), processRecordDto);
                processRecordDtoList.add(processRecordDto);
            });
            if (processRecordDtoList.stream().anyMatch(processDefinitionDto -> processDefinitionDto.getReviewerIds().contains(String.valueOf(userId))
                    && processDefinitionDto.getReviewerNames().contains(userName))) {
                return true;
            }
        }
        //本人申请的流程
        HistoricProcessInstanceQuery historicProcessInstanceQuery = historyService.createHistoricProcessInstanceQuery().processInstanceTenantId(String.valueOf(tenantId)).variableValueEquals(IConstants.PROCESS_APPLY_USER_ID, userId).variableValueEquals(IConstants.PROCESS_APPLY_USER, userName);
        List<HistoricProcessInstance> hisProcessList = historicProcessInstanceQuery.list();
        if (!CollectionUtils.isEmpty(hisProcessList) && hisProcessList.stream().anyMatch(historicTaskInstance -> Objects.isNull(historicTaskInstance.getEndTime()))) {
            return true;
        }
        //待办
        String assignee = String.valueOf(userId) + '_' + userName;
        //兼容Id+name方式
        if (taskService.createTaskQuery().taskTenantId(String.valueOf(tenantId)).taskAssigneeLike(assignee).active().count() > 0) {
            return true;
        }
        assignee = String.valueOf(userId);
        if (taskService.createTaskQuery().taskTenantId(String.valueOf(tenantId)).taskAssigneeLike(assignee).active().count() > 0) {
            return true;
        }
        //流程在引擎中执行但用户不是当前处理人
        historicProcessInstanceQuery = historyService.createHistoricProcessInstanceQuery().processInstanceTenantId(String.valueOf(tenantId));
        List<HistoricProcessInstance> historicProcessInstanceList = historicProcessInstanceQuery.list().stream().filter(historicTaskInstance -> Objects.isNull(historicTaskInstance.getEndTime())).collect(Collectors.toList());
        if (!CollectionUtils.isEmpty(historicProcessInstanceList)) {
            List<String> processKeyLists = historicProcessInstanceList.stream().map(HistoricProcessInstance::getProcessDefinitionKey).distinct().collect(Collectors.toList());
            processDefinitionList = processRecordRepository.findAllByProcessKeyIn(processKeyLists);
            if (!CollectionUtils.isEmpty(processDefinitionList)) {
                return processDefinitionList.stream().anyMatch(processDefinition -> processDefinition.getReviewerIds().contains(String.valueOf(userId))
                        && processDefinition.getReviewerNames().contains(userName));
            }
        }
        return false;
    }

    private String getProcessVariableValueByVariableName(List<HistoricVariableInstance> entityList, String variableName) {
        if (CollectionUtils.isEmpty(entityList)) {
            return null;
        }
        Optional<HistoricVariableInstance> optional = entityList.stream().filter(historicVariableInstance -> historicVariableInstance.getVariableName().equals(variableName)).findAny();
        return optional.map(historicVariableInstance -> (String) historicVariableInstance.getValue()).orElse("");
    }
}